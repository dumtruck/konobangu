/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './controllers/__root'
import { Route as IndexImport } from './controllers/index'
import { Route as GraphqlIndexImport } from './controllers/graphql/index'
import { Route as OidcCallbackImport } from './controllers/oidc/callback'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GraphqlIndexRoute = GraphqlIndexImport.update({
  id: '/graphql/',
  path: '/graphql/',
  getParentRoute: () => rootRoute,
} as any)

const OidcCallbackRoute = OidcCallbackImport.update({
  id: '/oidc/callback',
  path: '/oidc/callback',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/oidc/callback': {
      id: '/oidc/callback'
      path: '/oidc/callback'
      fullPath: '/oidc/callback'
      preLoaderRoute: typeof OidcCallbackImport
      parentRoute: typeof rootRoute
    }
    '/graphql/': {
      id: '/graphql/'
      path: '/graphql'
      fullPath: '/graphql'
      preLoaderRoute: typeof GraphqlIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/oidc/callback': typeof OidcCallbackRoute
  '/graphql': typeof GraphqlIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/oidc/callback': typeof OidcCallbackRoute
  '/graphql': typeof GraphqlIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/oidc/callback': typeof OidcCallbackRoute
  '/graphql/': typeof GraphqlIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/oidc/callback' | '/graphql'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/oidc/callback' | '/graphql'
  id: '__root__' | '/' | '/oidc/callback' | '/graphql/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OidcCallbackRoute: typeof OidcCallbackRoute
  GraphqlIndexRoute: typeof GraphqlIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OidcCallbackRoute: OidcCallbackRoute,
  GraphqlIndexRoute: GraphqlIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/oidc/callback",
        "/graphql/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/oidc/callback": {
      "filePath": "oidc/callback.tsx"
    },
    "/graphql/": {
      "filePath": "graphql/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
